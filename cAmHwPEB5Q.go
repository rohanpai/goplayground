// Пакет стандартной библиотеки `strings` предоставляет много
// полезных функций для работы со строками. Вот, несколько примеров,
// отображающие возможности пакета.

package main

import s &#34;strings&#34;
import &#34;fmt&#34;

// Присвоим переменной `p` функцию `fmt.Println` для сокращения
// имени, которую мы будем использовать ниже.
var p = fmt.Println

func main() {

    // Данные функции доступны в пакете `strings`.
    // Обратите внимание, что все эти функции из пакета, а
    // не методы строковых объектов. Это означает, что нам
    // необходимо передать первым аргументом функции, строку,
    // над которой мы производим операцию.
    p(&#34;Contains:  &#34;, s.Contains(&#34;test&#34;, &#34;es&#34;))
    p(&#34;Count:     &#34;, s.Count(&#34;test&#34;, &#34;t&#34;))
    p(&#34;HasPrefix: &#34;, s.HasPrefix(&#34;test&#34;, &#34;te&#34;))
    p(&#34;HasSuffix: &#34;, s.HasSuffix(&#34;test&#34;, &#34;st&#34;))
    p(&#34;Index:     &#34;, s.Index(&#34;test&#34;, &#34;e&#34;))
    p(&#34;Join:      &#34;, s.Join([]string{&#34;a&#34;, &#34;b&#34;}, &#34;-&#34;))
    p(&#34;Repeat:    &#34;, s.Repeat(&#34;a&#34;, 5))
    p(&#34;Replace:   &#34;, s.Replace(&#34;foo&#34;, &#34;o&#34;, &#34;0&#34;, -1))
    p(&#34;Replace:   &#34;, s.Replace(&#34;foo&#34;, &#34;o&#34;, &#34;0&#34;, 1))
    p(&#34;Split:     &#34;, s.Split(&#34;a-b-c-d-e&#34;, &#34;-&#34;))
    p(&#34;ToLower:   &#34;, s.ToLower(&#34;TEST&#34;))
    p(&#34;ToUpper:   &#34;, s.ToUpper(&#34;test&#34;))
    p()

    // Вы можете найти больше функций из документации
    // к пакету [`strings`](http://golang.org/pkg/strings/)

    // Примеры ниже не относятся к пакету `strings`, но о них
    // стоит упомянуть - это механизмы для получения длины строки
    // и получение символа по индексу.
    p(&#34;Len: &#34;, len(&#34;hello&#34;))
    p(&#34;Char:&#34;, &#34;hello&#34;[1])
}
