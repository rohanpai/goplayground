// Go имеет встроенную поддержку для форматирования строк
// сродни `printf`. Ниже нескольно общих примеров для
// выполнения задач форматирования.

package main

import &#34;fmt&#34;
import &#34;os&#34;

type point struct {
    x, y int
}

func main() {

    // Go предлагает несколько &#34;глаголов&#34; созданных
    // для форматирования общих Go значений. Например, это
    // выведет инстанс нашей `point` структуры.
    p := point{1, 2}
    fmt.Printf(&#34;%v\n&#34;, p)

    // Если значение является структурой, вариант `%&#43;v`
    // будет включать так же имена полей структуры.
    fmt.Printf(&#34;%&#43;v\n&#34;, p)

    // The `%#v` variant prints a Go syntax representation
    // of the value, i.e. the source code snippet that
    // would produce that value.

    // Вариант форматирования `%#v` выведет Go синтакс
    // представление значения, т.е. кусочек исходного кода
    // который произведет это значение.
    fmt.Printf(&#34;%#v\n&#34;, p)

    // Чтобы вывести тип значения, используйте `%T`.
    fmt.Printf(&#34;%T\n&#34;, p)

    // Форматирование булевых значений прямолинейно.
    fmt.Printf(&#34;%t\n&#34;, true)

    // Существует множество операций для форматирования
    // целочисленных значений. Используйте `%d` для
    // десятичной системы исчисления
    fmt.Printf(&#34;%d\n&#34;, 123)

    // Это выведет бинарное представление числа.
    fmt.Printf(&#34;%b\n&#34;, 14)

    // Вывод символа, соответсвующего заданному числу.
    fmt.Printf(&#34;%c\n&#34;, 33)

    // `%x` для шестнадцатеричного исчисления
    fmt.Printf(&#34;%x\n&#34;, 456)

    // There are also several formatting options for
    // floats. For basic decimal formatting use `%f`.

    // Так же имеется несколько опций для форматирования
    // чисел с плавающей запятой.
    fmt.Printf(&#34;%f\n&#34;, 78.9)

    // `%e` and `%E` format the float in (slightly
    // different versions of) scientific notation.

    // `%e` и `%E` форматирует число с плавающей запятой
    // в виде (немого другой версии) научной нотации.
    fmt.Printf(&#34;%e\n&#34;, 123400000.0)
    fmt.Printf(&#34;%E\n&#34;, 123400000.0)

    // Для простого вывода строк используйте `%s`.
    fmt.Printf(&#34;%s\n&#34;, &#34;\&#34;string\&#34;&#34;)

    // Для двойных ковычек как в исходниках Go, используйте  `%q`
    fmt.Printf(&#34;%q\n&#34;, &#34;\&#34;string\&#34;&#34;)

    // Так же как и с целочисленными ранее, `%x` отображает
    // строку в виде шестнадцатеричного исчисления, с
    // двумя символами вывода за каждый байт ввода.
    fmt.Printf(&#34;%x\n&#34;, &#34;hex this&#34;)

    // Чтобы показать представление ссылки, используйте `%p`.
    fmt.Printf(&#34;%p\n&#34;, &amp;p)

    // При форматировании чисел вы часто захотите
    // контролировать ширину и точность итоговой
    // цифры. Чтобы установить ширину числа, укажите
    // число после `%`. По умолчанию, результат будет
    // отображаться по правому краю с пробелами
    // слева.
    fmt.Printf(&#34;|%6d|%6d|\n&#34;, 12, 345)

    // Вы так же можете указать ширифу вывода чисел
    // с плавающей точкой, хотя зачастую вы так же
    // хотели бы ограничить десятичную точность
    // с шириной используя синтакс ширина.точность
    fmt.Printf(&#34;|%6.2f|%6.2f|\n&#34;, 1.2, 3.45)

    // Для вывода по левой стороне, укажите флаг `-`.
    fmt.Printf(&#34;|%-6.2f|%-6.2f|\n&#34;, 1.2, 3.45)

    // Возможно вы бы хотели контролировать ширину
    // форматирования строк, например, для гарантии вывода
    // в виде таблицы.
    fmt.Printf(&#34;|%6s|%6s|\n&#34;, &#34;foo&#34;, &#34;b&#34;)

    // Для вывода по левой стороне, укажите флаг `-` с числами.
    fmt.Printf(&#34;|%-6s|%-6s|\n&#34;, &#34;foo&#34;, &#34;b&#34;)

    // До сих пор мы видели `Printf`, который выводит
    // отформатированные строки в `os.Stdout`. `Sprintf`
    // форматирует и возвращает строку без вывода ее
    // куда-либо.
    s := fmt.Sprintf(&#34;a %s&#34;, &#34;string&#34;)
    fmt.Println(s)

    // Вы можете форматировать и выводить в `io.Writers`
    // вместо `os.Stdout` используя `Fprintf`
    fmt.Fprintf(os.Stderr, &#34;an %s\n&#34;, &#34;error&#34;)
}
